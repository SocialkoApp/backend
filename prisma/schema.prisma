// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  username String @unique

  role Role @default(User)

  password String

  emailConfirmed          Boolean   @default(value: false)
  emailConfirmationSentAt DateTime?

  forgotPasswordToken String?

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  User
  Admin
}

model Profile {
  id String @id @default(uuid())

  firstName String?
  lastName  String?

  user User?

  posts Post[]

  profilePicture   PublicFile? @relation(fields: [profilePictureId], references: [id])
  profilePictureId String?

  bio String?

  upvoted   Upvote[]
  downvoted Downvote[]

  cult CultMembership?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Post {
  id String @id @default(uuid())

  image   PublicFile? @relation(fields: [imageId], references: [id])
  imageId String?

  upvotes   Upvote[]
  downvotes Downvote[]
  score     Int        @default(0)

  description String?

  author   Profile? @relation(fields: [authorId], references: [id])
  authorId String?

  cult   Cult?   @relation(fields: [cultId], references: [id])
  cultId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Upvote {
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @map("profile_id")

  post   Post   @relation(fields: [postId], references: [id])
  postId String @map("post_id")

  @@id([profileId, postId])
  @@map("post_upvote")
}

model Downvote {
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@id([profileId, postId])
  @@map("post_downvote")
}

model CultMembership {
  role CultRole @default(Member)

  member   Profile @relation(fields: [memberId], references: [id])
  memberId String  @unique

  cult   Cult   @relation(fields: [cultId], references: [id])
  cultId String

  @@id([cultId, memberId])
  @@map("cult_membership")
}

enum CultRole {
  Ruler
  Member
}

model Cult {
  id String @id @default(uuid())

  name        String @unique
  description String

  members CultMembership[]

  icon   PublicFile? @relation(fields: [iconId], references: [id])
  iconId String?

  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PublicFile {
  id String @id @default(uuid())

  url String
  key String @unique

  profile Profile[]

  post Post[]

  cult Cult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PrivateFile {
  id  String @id @default(uuid())
  url String
  key String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Config {
  key   String @unique
  value String
}
