// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  username String @unique

  role Role @default(User)

  password String

  emailConfirmed          Boolean   @default(value: false)
  emailConfirmationSentAt DateTime?

  forgotPasswordToken String?

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  User
  Admin
}

model Profile {
  id String @id @default(uuid())

  firstName String
  lastName  String

  user User?

  posts Post[]

  profilePicture   PublicFile? @relation(fields: [profilePictureId], references: [id])
  profilePictureId String?

  bio String @default("A Socialko user")

  voted    Vote[]
  comments Comment[]

  organization            OrganizationMembership?
  organizationJoinRequest OrganizationJoinRequest?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Post {
  id String @id @default(uuid())

  image   PublicFile? @relation(fields: [imageId], references: [id])
  imageId String?

  votes    Vote[]
  comments Comment[]

  score Int @default(0)

  title       String?
  description String?

  author   Profile? @relation(fields: [authorId], references: [id])
  authorId String?

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  type PostType @default(Image)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum PostType {
  Text
  Image
}

model Vote {
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  type VoteType

  @@id([profileId, postId])
  @@map("post_vote")
}

enum VoteType {
  Upvote
  Downvote
}

model Comment {
  id String @id @default(uuid())

  author   Profile @relation(fields: [authorId], references: [id])
  authorId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  content String
}

model OrganizationMembership {
  role OrganizationRole @default(Member)

  member   Profile @relation(fields: [memberId], references: [id])
  memberId String  @unique

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@id([organizationId, memberId])
  @@map("organization_membership")
}

enum OrganizationRole {
  Admin
  Member
}

model Organization {
  id String @id @default(uuid())

  name        String @unique
  description String

  members OrganizationMembership[]

  icon   PublicFile? @relation(fields: [iconId], references: [id])
  iconId String?

  posts Post[]

  joinRequests OrganizationJoinRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model OrganizationJoinRequest {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique

  @@id([organizationId, profileId])
  @@map("organization_join_request")
}

model PublicFile {
  id String @id @default(uuid())

  url String
  key String @unique

  profile Profile[]

  post Post[]

  organization Organization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PrivateFile {
  id  String @id @default(uuid())
  url String
  key String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Config {
  key   String @unique
  value String
}
