// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  username String @unique

  role Role @default(USER)

  password String

  emailConfirmed          Boolean   @default(value: false)
  emailConfirmationSentAt DateTime?

  forgotPasswordToken String?

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  USER
  EDITOR
  ADMIN
}

model Profile {
  id Int @id @default(autoincrement())

  firstName String?
  lastName  String?

  user User?

  posts   Post[]
  stories Story[]

  profilePicture   PublicFile? @relation(fields: [profilePictureId], references: [id])
  profilePictureId Int?

  bio String?

  upvoted   Upvote[]
  downvoted Downvote[]

  following Follow[] @relation("Following")
  followers Follow[] @relation("Followers")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Follow {
  follower   Profile @relation("Followers", fields: [followerId], references: [id])
  followerId Int

  following   Profile @relation("Following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
  @@map("follow")
}

model Post {
  id Int @id @default(autoincrement())

  image   PublicFile? @relation(fields: [imageId], references: [id])
  imageId Int?

  upvotes     Upvote[]
  downvotes   Downvote[]
  description String?

  author   Profile? @relation(fields: [authorId], references: [id])
  authorId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Upvote {
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int     @map("profile_id")

  post   Post @relation(fields: [postId], references: [id])
  postId Int  @map("post_id")

  @@id([profileId, postId])
  @@map("post_upvote")
}

model Downvote {
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int

  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@id([profileId, postId])
  @@map("post_downvote")
}

model Story {
  id Int @id @default(autoincrement())

  image   PublicFile? @relation(fields: [imageId], references: [id])
  imageId Int?

  upvotes   Int @default(0)
  downvotes Int @default(0)

  author   Profile? @relation(fields: [authorId], references: [id])
  authorId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PublicFile {
  id Int @id @default(autoincrement())

  url String
  key String @unique

  profile Profile[]

  post  Post[]
  story Story[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PrivateFile {
  id Int @id @default(autoincrement())

  url String
  key String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Config {
  key   String @unique
  value String
}
