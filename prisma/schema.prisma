// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  username String @unique

  birthDate DateTime?

  role Role @default(USER)

  password String

  emailConfirmed          Boolean   @default(value: false)
  emailConfirmationSentAt DateTime?

  forgotPasswordToken String?

  profile Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  USER
  EDITOR
  ADMIN
}

model Profile {
  id Int @id @default(autoincrement())

  firstName String?
  lastName  String?

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  posts   Post[]
  stories Story[]

  profilePicture   PublicFile? @relation(fields: [profilePictureId], references: [id])
  profilePictureId Int?

  bio       String?
  birthDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// model Follow {
//   id          Int  @id @default(autoincrement())
//   follower    User @relation(name: "Followers", fields: [followerId], references: [id])
//   followerId  Int
//   following   User @relation(name: "Following", fields: [followingId], references: [id])
//   followingId Int

//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt
// }

model Post {
  id        Int         @id @default(autoincrement())
  image     PublicFile? @relation(fields: [imageId], references: [id])
  imageId   Int?
  upvotes   Int         @default(0)
  downvotes Int         @default(0)
  author    Profile?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

model Story {
  id        Int         @id @default(autoincrement())
  image     PublicFile? @relation(fields: [imageId], references: [id])
  imageId   Int?
  upvotes   Int         @default(0)
  downvotes Int         @default(0)
  author    Profile?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

model PublicFile {
  id        Int       @id @default(autoincrement())
  url       String
  key       String    @unique
  profile   Profile[]
  post      Post[]
  story     Story[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}
